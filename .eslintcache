[{"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/App.tsx":"1","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Login.tsx":"2","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/ForgotPassword.tsx":"3","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/context/authContext.tsx":"4","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Signup.tsx":"5","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/index.tsx":"6","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Dashboard.tsx":"7","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/PrivateRoute.tsx":"8","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/UpdateProfile.tsx":"9","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/firebase.ts":"10","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/styles/styles.ts":"11","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Navigation.tsx":"12","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/InProgress.tsx":"13","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Recent.tsx":"14"},{"size":1465,"mtime":1611249844040,"results":"15","hashOfConfig":"16"},{"size":2033,"mtime":1611173880100,"results":"17","hashOfConfig":"16"},{"size":1873,"mtime":1611174037297,"results":"18","hashOfConfig":"16"},{"size":1386,"mtime":1611081883903,"results":"19","hashOfConfig":"16"},{"size":2289,"mtime":1611173981425,"results":"20","hashOfConfig":"16"},{"size":457,"mtime":1611082153287,"results":"21","hashOfConfig":"16"},{"size":5461,"mtime":1611625264399,"results":"22","hashOfConfig":"16"},{"size":450,"mtime":1611081883931,"results":"23","hashOfConfig":"16"},{"size":2707,"mtime":1611081883933,"results":"24","hashOfConfig":"16"},{"size":586,"mtime":1611164942849,"results":"25","hashOfConfig":"16"},{"size":795,"mtime":1611249831741,"results":"26","hashOfConfig":"16"},{"size":978,"mtime":1611627687363,"results":"27","hashOfConfig":"16"},{"size":6190,"mtime":1611627613505,"results":"28","hashOfConfig":"16"},{"size":107,"mtime":1611247883812,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"19zaqp8",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"33"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/App.tsx",["64","65"],"import React from 'react';\nimport Signup from './components/Signup'\nimport { AuthProvider } from './context/authContext';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Dashboard from './components/Dashboard';\nimport Login from './components/Login';\nimport ForgotPassword from './components/ForgotPassword'\nimport PrivateRoute from './components/PrivateRoute';\nimport UpdateProfile from './components/UpdateProfile';\nimport { HeaderComponent, TitleComponent } from './styles/styles';\nimport InProgress from './components/InProgress';\nimport Recent from './components/Recent';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{display: 'flex', flexDirection: 'column', flex: 1}}>\n      {/* <HeaderComponent>\n        <TitleComponent>Keys</TitleComponent>\n      </HeaderComponent> */}\n      <Router>\n        <AuthProvider>\n          <Switch>\n            <PrivateRoute path=\"/\" component={Dashboard} exact />\n            <PrivateRoute path=\"/in-progress\" component={InProgress} exact />\n            <PrivateRoute path=\"/recent\" component={Recent} exact />\n            <PrivateRoute path=\"/update-profile\" component={UpdateProfile} exact />\n            <Route path=\"/signup\" component={Signup} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/forgot-password\" component={ForgotPassword} />\n          </Switch>\n        </AuthProvider>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n",["66","67"],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Login.tsx",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/ForgotPassword.tsx",[],["68","69"],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/context/authContext.tsx",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Signup.tsx",[],["70","71"],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/index.tsx",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Dashboard.tsx",["72"],"import React, { useState, useEffect } from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { useAuth } from \"../context/authContext\"\nimport { useHistory } from \"react-router-dom\"\nimport firebase from '../firebase';\nimport { useTable } from 'react-table'\nimport styled from 'styled-components';\nimport { BodyComponent, FooterComponent } from '../styles/styles'\nimport  Navigation from './Navigation'\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({ columns, data } : any) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    rows\n  } = useTable({\n    columns, data\n  })\n  // Render the UI for your table\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default function Dashboard() {\n  const [error, setError] = useState(\"\")\n  const { currentUser , logout } : any = useAuth()\n  const [itemList, setItemList] = useState<any>()\n  const history = useHistory()\n\n  useEffect(() => {\n    const itemRef = firebase.database().ref('Properties')\n    itemRef.on(\"value\", (snapshot) => {\n      const items = snapshot.val()\n      const list : any = [];\n      for (let id in items) {\n        list.push(items[id])\n      }\n      setItemList(list)\n    });\n  }, []);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Address',\n        accessor: 'Address', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Location',\n        accessor: 'Location',\n      },\n      {\n        Header: 'Status',\n        accessor: 'Status',\n      },\n      {\n        Header: 'Return',\n        accessor: 'Return',\n        Cell: ({\n          value: initialValue,\n          row: { index },\n          column: { id }\n        } : any) => {\n          // We need to keep and update the state of the cell normally\n          const [value, setValue] = useState(initialValue)\n        \n          const onChange = (e: { target: { value: any; }; }) => {\n            setValue(e.target.value)\n          }\n        \n          const updateMyData = (rowIndex : any, columnId : any, value : any) => {\n            const itemRef = firebase.database().ref('Properties').child(rowIndex)\n            itemRef.update({\n              Return : value,\n              Status : \"Out\",\n              Employee : currentUser.email\n            })\n            itemRef.on(\"value\", (snapshot) => {\n              const item = snapshot.val()\n              const keyRef = firebase.database().ref('Current')\n              var today = new Date();\n              var dd = String(today.getDate()).padStart(2, '0');\n              var mm = String(today.getMonth() + 1).padStart(2, '0');\n              var yyyy = today.getFullYear();\n              var date = yyyy + '-' + mm + '-' + dd;\n              const key = {\n                Address : item.Address,\n                Location : item.Location,\n                Out : date,\n                Return : item.Return,\n                Employee : item.Employee,\n                Complete : false\n              }\n              console.log(key)\n              keyRef.push(key)\n            });\n          }\n        \n          // We'll only update the external data when the input is blurred\n          const onBlur = () => {\n            updateMyData(index, id, value)\n          }\n        \n          // If the initialValue is changed external, sync it up with our state\n          React.useEffect(() => {\n            setValue(initialValue)\n          }, [initialValue])\n        \n          return <input type=\"date\" value={value} onChange={onChange} onBlur={onBlur} />\n        }\n      },\n      {\n        Header: 'Employee',\n        accessor: 'Employee',\n      },\n    ],\n    [currentUser]\n  )\n\n  async function handleLogout() {\n    setError(\"\")\n\n    try {\n      await logout()\n      history.push(\"/login\")\n    } catch {\n      setError(\"Failed to log out\")\n    }\n  }\n\n  if (typeof(itemList) !== 'undefined') {\n    return (\n      <>\n        <div style={{display: 'flex', flexDirection: 'column', flex: 1}}>\n          <BodyComponent> \n            <Navigation />\n            <Styles>\n              <Table columns={columns} data={itemList} />\n            </Styles>\n          </BodyComponent>\n          <FooterComponent>\n            <div className=\"w-100 text-center mt-2\">\n            <Button variant=\"link\" onClick={handleLogout}>\n              Log Out\n            </Button>\n            </div>\n          </FooterComponent>\n        </div>\n      </>\n    )\n  } else {\n    return (\n      <></>\n    )\n  }\n}","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/PrivateRoute.tsx",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/UpdateProfile.tsx",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/firebase.ts",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/styles/styles.ts",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Navigation.tsx",[],"/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/InProgress.tsx",["73","74","75"],"import React, { useState, useEffect } from \"react\"\nimport { Button } from \"react-bootstrap\"\nimport { useAuth } from \"../context/authContext\"\nimport { useHistory } from \"react-router-dom\"\nimport firebase from '../firebase';\nimport { useTable } from 'react-table'\nimport styled from 'styled-components';\nimport { BodyComponent, FooterComponent } from '../styles/styles'\nimport  Navigation from './Navigation'\n\n\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`\n\nfunction Table({ columns, data } : any) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    rows\n  } = useTable({\n    columns, data\n  })\n  // Render the UI for your table\n  return (\n    <table {...getTableProps()}>\n      <thead>\n        {headerGroups.map(headerGroup => (\n          <tr {...headerGroup.getHeaderGroupProps()}>\n            {headerGroup.headers.map(column => (\n              <th {...column.getHeaderProps()}>{column.render('Header')}</th>\n            ))}\n          </tr>\n        ))}\n      </thead>\n      <tbody {...getTableBodyProps()}>\n        {rows.map((row, i) => {\n          prepareRow(row)\n          return (\n            <tr {...row.getRowProps()}>\n              {row.cells.map(cell => {\n                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n              })}\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  )\n}\n\nexport default function Dashboard() {\n  const [error, setError] = useState(\"\")\n  const { currentUser , logout } : any = useAuth()\n  const [itemList, setItemList] = useState<any>()\n  const history = useHistory()\n\n  useEffect(() => {\n    const itemRef = firebase.database().ref('Current')\n    itemRef.on(\"value\", (snapshot) => {\n      const items = snapshot.val()\n      const list : any = [];\n      for (let id in items) {\n        console.log(items[id])\n        let newItem = items[id]\n        newItem.id = id\n        console.log(newItem)\n        list.push(newItem)\n      }\n      console.log('USE EFFECT LIST',list)\n      setItemList(list)\n      console.log('USE EFFECT ITEMLIST',itemList)\n    });\n  }, []);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Address',\n        accessor: 'Address', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Location',\n        accessor: 'Location',\n      },\n      {\n        Header: 'Out',\n        accessor: 'Out',\n      },\n      {\n        Header: 'Return',\n        accessor: 'Return',\n      },\n      {\n        Header: 'Employee',\n        accessor: 'Employee',\n      },\n      {\n        Header: 'Complete',\n        accessor: 'Complete',\n        Cell: ({\n          value: initialValue,\n          row: { index },\n          column: { id }\n        } : any) => {\n          // We need to keep and update the state of the cell normally\n          const [value, setValue] = useState(initialValue)\n        \n          const onChange = (e: { target: { value: any; }; }) => {\n            setValue(e.target.value)\n          }\n        \n          const updateMyData = (rowIndex : any, columnId : any, value : any) => {\n            const currentRef = firebase.database().ref('Current')\n            currentRef.on(\"value\", (snapshot) => {\n              const items = snapshot.val()\n              const list : any = [];\n              for (let id in items) {\n                console.log(items[id])\n                let newItem = items[id]\n                newItem.id = id\n                console.log(newItem)\n                list.push(newItem)\n              }\n              console.log('LIST',list)\n              setItemList(list)\n              console.log('ITEMLIST',itemList)\n            });\n            console.log('????',itemList)\n            const itemRef = firebase.database().ref('Current').child(itemList[rowIndex].id)\n            // itemRef.on(\"value\", (snapshot) => {\n            //   const item = snapshot.val()\n            //   console.log(item)\n            //   const recentRef = firebase.database().ref('Recent')\n            //   const recent = {\n            //     Address : item.Address,\n            //     Location : item.Location,\n            //     Out : item.Out,\n            //     Return : item.Return,\n            //     Employee : item.Employee,\n            //   }\n            //   recentRef.push(recent)\n            // });\n            itemRef.remove();\n            const propertyRef = firebase.database().ref('Properties').child(rowIndex)\n            propertyRef.update({\n              Return : '',\n              Status : \"In\",\n              Employee : ''\n            })\n          }\n        \n          // We'll only update the external data when the input is blurred\n          const onBlur = () => {\n            updateMyData(index, id, value)\n          }\n        \n          // If the initialValue is changed external, sync it up with our state\n          React.useEffect(() => {\n            setValue(initialValue)\n          }, [initialValue])\n        \n          return <input type=\"checkbox\" onChange={onChange} onBlur={onBlur} />\n        }\n      },\n    ],\n    [itemList]\n  )\n\n  async function handleLogout() {\n    setError(\"\")\n\n    try {\n      await logout()\n      history.push(\"/login\")\n    } catch {\n      setError(\"Failed to log out\")\n    }\n  }\n\n  if (typeof(itemList) !== 'undefined') {\n    return (\n      <>\n        <div style={{display: 'flex', flexDirection: 'column', flex: 1}}>\n          <BodyComponent> \n            <Navigation />\n            <Styles>\n              <Table columns={columns} data={itemList} />\n            </Styles>\n          </BodyComponent>\n          <FooterComponent>\n            <div className=\"w-100 text-center mt-2\">\n            <Button variant=\"link\" onClick={handleLogout}>\n              Log Out\n            </Button>\n            </div>\n          </FooterComponent>\n        </div>\n      </>\n    )\n  } else {\n    return (\n      <></>\n    )\n  }\n}","/Users/wyattgarner/Dev/react/inventory/inventory-app/src/components/Recent.tsx",[],{"ruleId":"76","severity":1,"message":"77","line":10,"column":10,"nodeType":"78","messageId":"79","endLine":10,"endColumn":25},{"ruleId":"76","severity":1,"message":"80","line":10,"column":27,"nodeType":"78","messageId":"79","endLine":10,"endColumn":41},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"81","replacedBy":"85"},{"ruleId":"83","replacedBy":"86"},{"ruleId":"81","replacedBy":"87"},{"ruleId":"83","replacedBy":"88"},{"ruleId":"76","severity":1,"message":"89","line":80,"column":10,"nodeType":"78","messageId":"79","endLine":80,"endColumn":15},{"ruleId":"76","severity":1,"message":"89","line":80,"column":10,"nodeType":"78","messageId":"79","endLine":80,"endColumn":15},{"ruleId":"76","severity":1,"message":"90","line":81,"column":11,"nodeType":"78","messageId":"79","endLine":81,"endColumn":22},{"ruleId":"91","severity":1,"message":"92","line":101,"column":6,"nodeType":"93","endLine":101,"endColumn":8,"suggestions":"94"},"@typescript-eslint/no-unused-vars","'HeaderComponent' is defined but never used.","Identifier","unusedVar","'TitleComponent' is defined but never used.","no-native-reassign",["95"],"no-negated-in-lhs",["96"],["95"],["96"],["95"],["96"],"'error' is assigned a value but never used.","'currentUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'itemList'. Either include it or remove the dependency array.","ArrayExpression",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},"Update the dependencies array to be: [itemList]",{"range":"100","text":"101"},[2433,2435],"[itemList]"]